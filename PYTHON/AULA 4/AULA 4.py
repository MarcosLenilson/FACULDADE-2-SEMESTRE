import pandas as pd
from datetime import date
from datetime import datetime as dt
#! INTRODU√á√ÉO A BIBLIOTECA PANDAS

#! Cw4 - Linguagem de Programa√ß√£o => Se√ß√£o 1

# ? pd.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)
# ? pd.Series(data=5)
# ? names = pd.Series('Howard Ian Peter Jonah Kellie'.split())
# ? print(names)

# ? pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)

# * Cria um DataFrame, de uma coluna a partir de uma lista
# ? names = pd.DataFrame('Howard Ian Peter Jonah Kellie'.split(), columns=['nome'])
# ? print(names)

# * Cria um DataFrame, com VARIAS COLUNAS a partir de uma lista

# ? lista_nomes = 'Howard Ian Peter Jonah Kellie'.split()
# ? lista_cpfs = '111.111.111-11 222.222.222-22 333.333.333-33 444.444.444-44 555.555.555-55'.split()
# ? lista_emails = 'risus.varius@dictumPhasellusin.ca Nunc@vulputate.ca fames.ac.turpis@cursusa.org non@felisullamcorper.org eget.dictum.placerat@necluctus.co.uk'.split()
# ? lista_idades = [32, 22, 25, 29, 38]
# ? dados = list(zip(lista_nomes, lista_cpfs, lista_idades, lista_emails)) # * Cria uma lista de tupla

# * Cria um DataFrame a partir de uma lista de tuplas
# ? table = pd.DataFrame(dados, columns=['nome', 'cpfs', 'idade', 'email'])
# ? print(table)

# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER

#! INTRODU√á√ÉO A MANIPULA√á√ÉO DE DADOS EM PANDAS

#! Cw4 - Linguagem de Programa√ß√£o => Se√ß√£o 2

# ? lista_nomes_titanic = pd.DataFrame(['Mr. Owen Harris Braund', 'Mrs. John Bradley Florence Briggs Thayer Cumings','Miss. Laina Heikkinen', 'Mrs Jacques Heath (Lily May Peel) Futrelle', 'Mr. William Henry Allen'.split()])

# ? lista_idades = [22, 38, 26, 35, 35]
# ? lista_classe = [3, 1, 3, 1, 3]
# ? homens = pd['sexo'] == 'Masculino'
# ? print(homens)


# ? table = pd.DataFrame(dados, columns=['classe', 'nome', 'sexo', 'idade', 'sobreviveu'])

# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER
# * A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER A RESOLVER

#! TELE AULA 4 AULA 1 => LIVRO TEXTO => UNIDADE 4 SE√á√ÉO 1 = N√ÉO PODE FALTAR

# * Como uma ferramenta de alto n√≠vel, pandas possui duas estruturas de dados que s√£o as principais para a an√°lise/manipula√ß√£o de dados: a Series e o DataFrame.


#! SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES SERIES

pd.Series(data=5)  # Cria uma Series com o valor a
pd.Series(data=None, index=None, dtype=None,
          name=None, copy=False, fastpath=False)
# Cria uma Series com uma lista de nomes
names = pd.Series('Howard Ian Peter Jonah Kellie'.split())
# ? print(names)

#!  Series com um dicion√°rio
dados = {
    'nome1': 'Howard',
    'nome2': 'Ian',
    'nome3': 'Peter',
    'nome4': 'Jonah',
    'nome5': 'Kellie',
}
dicion√°rio = pd.Series(dados)  # ! Chave
# ? print(dicion√°rio)                           #! √çndice     Coluna
# nome1     Howard
# nome2     Ian
# nome3     Peter
# nome4     Jonah
# nome5     Kellie

#! Pode ser utilizado um lista para ser a chave(√≠ndice) ou r√≥tulo dos valores da Series

lista_nomes = 'Howard Ian Peter Jonah Kellie'.split()
lista_cpfs = '111.111.111-11 222.222.222-22 333.333.333-33 444.444.444-44 555.555.555-55'.split()
dados1 = pd.Series(lista_nomes, index=lista_cpfs)
# ? print(dados1)

#! Localizador

# ? print(dados1.loc['111.111.111-11'])
# * Atributo loc()


#! EXTRAINDO INFORMA√á√ïES DE UMA SERIES

series_dados = pd.Series([10.2, -1, None, 15, 23.4])

# Retorna uma tupla com o n√∫mero de linhas
# ? print('Quantidade de linhas = ', series_dados.shape)

# Retorna o tipo de dados, se for misto ser√° object
# ? print('Tipo de dados', series_dados.dtypes)

# Verifica se os valores s√£o √∫nicos (sem duplica√ß√µes)
# ? print('Os valores s√£o √∫nicos?', series_dados.is_unique)

# Verifica se existem valores nulos
# ? print('Existem valores nulos?', series_dados.hasnans)

# Conta quantas valores existem (exclu√≠ os nulos)
# ? print('Quantos valores existem?', series_dados.count())

# Extrai o menor valor da Series (nesse caso os dados precisam ser do mesmo tipo)
# ? print('Qual o menor valor?', series_dados.min())

# Extrai o valor m√°ximo, com a mesma condi√ß√£o do m√≠nimo
# ? print('Qual o maior valor?', series_dados.max())

# Extrai a m√©dia aritm√©tica de uma Series num√©rica
# ? print('Qual a m√©dia aritm√©tica?', series_dados.mean())

# Extrai o desvio padr√£o de uma Series num√©rica
# ? print('Qual o desvio padr√£o?', series_dados.std())

# Extrai a mediana de uma Series num√©rica
# ? print('Qual a mediana?', series_dados.median())


#! RESUMO

# ? print('\nResumo:\n', series_dados.describe()) # Exibe um resumo sobre os dados na Series


#! üëáüëáüëá üëáüëáüëáDATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME

# * Para construir um objeto do tipo DataFrame, precisamos utilizar o m√©todo DataFrame() do pacote pandas. O m√©todo possui o seguinte construtor:

pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)

# * Dentre todos os par√¢metros esperados, somente um √© obrigat√≥rio para se criar um DataFrame com dados, o par√¢metro data=XXXX

#! DATAFRAME com LISTA

# ? lista_nomes = 'Howard Ian Peter Jonah Kellie'.split()
# ? idade = [255, 38, 26, 35, 35]
# ? dados = list(zip(lista_nomes, idade))
# ? pd.DataFrame(dados, columns=['nomes', 'idade'])
# ? print(pd.DataFrame(dados, columns=['nomes', 'idade']))

#! üëÜüëÜüëÜ üëÜüëÜüëÜ DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME DATAFRAME

#! M√âTODO READ()

# ? url = 'https://en.wikipedia.org/wiki/Minnesota'

# ? dfs = pd.read_html(url)
# ? print(type(dfs))
# ? print(len(dfs))
# ? print(dfs)


#! TELE AULA 4 AULA 2 => LIVRO TEXTO => UNIDADE 4 SE√á√ÉO 2 = N√ÉO PODE FALTAR
#! INTRODU√á√ÉO A MANIPULA√á√ÉO DE DADOS EM PANDAS

# * Al√©m dos m√©todos para carregar e salvar dados, a biblioteca pandas possui tamb√©m m√©todos para a transforma√ß√£o dos dados e a extra√ß√£o de informa√ß√£o.

#! M√âTODOS PARA LEITURA E ESCRITA DA BIBLIOTECA PANDAS

# * A biblioteca pandas foi desenvolvida para trabalhar com dados estruturados, ou seja, dados dispostos em linhas e colunas. Os dados podem estar gravados em arquivos, em p√°ginas web, em APIs, em outros softwares, em object stores (sistemas de armazenamento em cloud) ou em bancos de dados. Todos os m√©todos capazes de fazer a leitura dos dados estruturados possuem prefixo pd.read_XXX, onde pd √© o apelido dado no momento da importa√ß√£o da biblioteca e XXX √© o restante da sintaxe do m√©todo.

# * Dentre todos os poss√≠veis m√©todos para leitura, nessa aula vamos estudar o read_json, o read_csv e a fun√ß√£o read_sql, que contempla a fun√ß√£o read_sql_query.

#! LEITURA DE JSON E CSV COM PANDAS

#! A leitura de um arquivo JSON deve ser feita com o m√©todo:

# $ pd.read_json(path_or_buf=None, orient=None, typ='frame', dtype=None, convert_axes=None, convert_dates=True, keep_default_dates=True, numpy=False, precise_float=False, date_unit=None, encoding=None, lines=False, chunksize=None, compression='infer')

# @ Os detalhes de cada par√¢metro podem ser consultados na documenta√ß√£o oficial: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html. O √∫nico par√¢metro que √© obrigat√≥rio para se carregar os dados √© o "path_or_buf", no qual deve ser passado um caminho para o arquivo ou um "arquivo como objeto" que √© um arquivo lido com a fun√ß√£o open(), por exemplo.

# EXEMPLO DE ESCRITA DO M√âTODO JSON
# * O nome do arquivo sempre tem que ser SETTINGS.JSON
# 'data':{
#     'nome': 'Marcos',
#     'idade': 36
# }

json = pd.read_json(
    'https://api.bcb.gov.br/dados/serie/bcdata.sgs.11/dados?formato=json').head()
# ? print(json)

#! A leitura de um arquivo CSV deve ser feita com o m√©todo:

# $ pandas.read_csv(filepath_or_buffer: Union[str, pathlib.Path, IO[~ AnyStr]], sep=',', delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal: str = '.', lineterminator=None, quotechar='"', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None).

# @ Para realizar o carregamento os dados, √© necess√°rio incluir o caminho(diret√≥rio), portanto o par√¢metro "filepath_or_buffer" √© OBRIGAT√ìRIO.

csv = pd.read_csv(
    'https://people.sc.fsu.edu/~jburkardt/data/csv/cities.csv').head()
# ? print(csv)

#! MANIPULA√á√ÉO DE DADOS COM PANDAS

# * Al√©m de v√°rios m√©todos para carregar e salvar os dados, a biblioteca pandas possui uma diversidade de m√©todos para a transforma√ß√£o dos dados e a extra√ß√£o de informa√ß√£o para √°reas de neg√≥cio.

# @ Para entender como essas duas etapas acontecem no dia a dia das empresas, vamos utilizar os dados da taxa Selic. Selic, ou taxa Selic √© a refer√™ncia base de juros da economia brasileira (https://blog.nubank.com.br/taxa-selic/).

df_selic = pd.read_json(
    'https://api.bcb.gov.br/dados/serie/bcdata.sgs.11/dados?formato=json')
# ? print(df_selic.info())

#! REMOVER LINHAS DUPLICADAS

# * Para o carregamento de uma base de dados, um dos primeiros tratamentos que devemos fazer √© remover os dados duplicados.

# ? print(df_selic.drop_duplicates(keep='last', inplace=True))

#! CRIAR NOVAS COLUNAS

data_extracao = date.today()

df_selic['data_extracao'] = data_extracao
df_selic['responsavel'] = 'Autora'

# ? print(df_selic.info())
df_selic.head()
# ? print(df_selic)

#! M√âTODO TO_DATETIME() E ASTYPE()

df_selic['data'] = pd.to_datetime(df_selic['data'], dayfirst=True)
df_selic['data_extracao'] = df_selic['data_extracao'].astype('datetime64[ns]')

print(df_selic.info())
df_selic.head()
print(df_selic)